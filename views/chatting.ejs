<!-- Try 8 -->

<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title>Chat with <%= friend.name %></title>
  <link rel="stylesheet" href="/styles/chat.css">
  <script src="/socket.io/socket.io.js"></script>
  <script type="module" src="https://cdn.jsdelivr.net/npm/emoji-picker-element@^1/index.js"></script>
  <style>
    :root {
      --bg-light: #f0f0f0;
      --bg-dark: #e5ddd5;
      --me-bubble: #dcf8c6;
      --them-bubble: #fff;
      --header-bg: #128c7e;
    }

    body {
      margin: 0;
      font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
      display: flex;
      flex-direction: column;
      height: 100vh;
      background-color: hsl(252, 30%, var(--light-color-lightness));
    }

    header {
      background-color: rgb(107, 77, 230);
      color: white;
      padding: 0px 16px;
      display: flex;
      align-items: center;
      gap: 10px;
    }

    header img {
      width: 42px;
      height: 42px;
      border-radius: 50%;
    }

    #messages {
      flex: 1;
      overflow-y: auto;
      padding: 20px 15px;
    }

    .msg {
      width: fit-content;
      padding: 10px 14px;
      margin: 10px 0;
      border-radius: 8px 8px 0 8px;
      position: relative;
      line-height: 1.4;
      box-shadow: 0 1px 1px rgba(0,0,0,0.1);
      max-width: 60%;
    }

    .msg img {
      max-width: 200px;
      display: block;
    }

    .msg.me {
      background-color: var(--me-bubble);
      margin-left: auto;
      border-radius: 8px 8px 8px 0;
    }

    .msg.them {
      background-color: var(--them-bubble);
      margin-right: auto;
    }

    .msg .time {
      font-size: 0.72em;
      color: #555;
      margin-top: 4px;
    }

    .dropdown {
      position: absolute;
      top: 5px;
      right: 5px;
    }

    .dropdown-toggle {
      /* background: none;
      border: none;
      font-size: 18px;
      cursor: pointer; */
        display: none;
        background: none;
        border: none;
        font-size: 18px;
        cursor: pointer;
    }
      /* Show toggle on message hover */
    .msg:hover .dropdown-toggle {
      display: inline;
    }
    
    .dropdown-menu {
      display: none;
      position: absolute;
      top: 20px;
      right: 0;
      background: #fff;
      border: 1px solid #ddd;
      border-radius: 4px;
      box-shadow: 0 2px 5px rgba(0,0,0,0.1);
      z-index: 100;
    }

    .dropdown:hover .dropdown-menu {
      display: block;
    }

    .dropdown-menu button {
      background: none;
      border: none;
      padding: 8px 12px;
      width: 100%;
      text-align: left;
      cursor: pointer;
    }

    #input-area {
      display: flex;
      align-items: center;
      padding: 10px 15px;
      background: white;
      border-top: 1px solid #ddd;
      gap: 10px;
    }

    #input {
      flex: 1;
      padding: 10px 14px;
      border-radius: 20px;
      border: 1px solid #ccc;
      font-size: 15px;
    }

    #send-btn, #emoji-btn, #attach-btn {
      background: none;
      border: none;
      font-size: 22px;
      cursor: pointer;
      color: #128c7e;
    }

    emoji-picker {
      position: absolute;
      bottom: 70px;
      right: 20px;
      display: none;
      z-index: 1000;
    }
  </style>
</head>
<body>
  <header>
    <img src="/uploads/<%= friend.profile_image || 'default-avatar.png' %>" alt="Avatar">
    <h3><%= friend.name %></h3>
  </header>

  <div id="messages">
    <% messages.forEach(msg => { %>
      <div class="msg <%= msg.senderId.toString() === me._id.toString() ? 'me' : 'them' %>" data-id="<%= msg._id %>">
        <span class="text"><%- msg.messageText %></span>
        <span class="time"><%= new Date(msg.timestamp).toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' }) %></span>
        <% if (msg.senderId.toString() === me._id.toString()) { %>
          <div class="dropdown">
            <button class="dropdown-toggle">â‹®</button>
            <div class="dropdown-menu">
              <button class="edit">Edit</button>
              <button class="delete">Delete</button>
            </div>
          </div>
        <% } %>
      </div>
    <% }) %>
  </div>

  <div id="input-area">
    <button id="emoji-btn">ðŸ˜Š</button>
    <button id="attach-btn">ðŸ“Ž</button>
    <input id="input" type="text" autocomplete="off" placeholder="Type a messageâ€¦" />
    <input type="file" id="file-input" style="display: none;" />
    <button id="send-btn" type="button">âž¤</button>
  </div>

  <emoji-picker id="emoji-picker"></emoji-picker>
  <audio id="notification-sound" src="/sounds/notification.MPEG" preload="auto"></audio>

  <script>
    const meId = "<%= me._id %>";
    const friendId = "<%= friend._id %>";
    const room = [meId, friendId].sort().join("--");

    const socket = io();
    socket.emit("join room", { room });

    const messagesEl = document.getElementById("messages");
    const input = document.getElementById("input");
    const sendBtn = document.getElementById("send-btn");
    const emojiBtn = document.getElementById("emoji-btn");
    const emojiPicker = document.getElementById("emoji-picker");
    const sound = document.getElementById("notification-sound");
    const attachBtn = document.getElementById("attach-btn");
    const fileInput = document.getElementById("file-input");

    let editingMessageId = null;

    window.onload = () => {
      messagesEl.scrollTop = messagesEl.scrollHeight;
    };

    function appendMessage({ _id, senderId, messageText, timestamp }) {
      const div = document.createElement("div");
      div.classList.add("msg", senderId === meId ? "me" : "them");
      div.dataset.id = _id;

      div.innerHTML = `
        <span class="text">${messageText}</span>
        <span class="time">${new Date(timestamp).toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' })}</span>
        ${senderId === meId ? `
          <div class="dropdown">
            <button class="dropdown-toggle">â‹®</button>
            <div class="dropdown-menu">
              <button class="edit">Edit</button>
              <button class="delete">Delete</button>
            </div>
          </div>` : ""}
      `;

      messagesEl.appendChild(div);
      messagesEl.scrollTop = messagesEl.scrollHeight;
    }

    socket.on("chat message", msg => {
      appendMessage(msg);
      if (msg.senderId !== meId) sound.play();
    });

    socket.on("message updated", ({ _id, messageText }) => {
      const el = document.querySelector(`.msg[data-id="${_id}"] .text`);
      if (el) el.innerHTML = messageText;
    });

    socket.on("message deleted", (_id) => {
      const el = document.querySelector(`.msg[data-id="${_id}"]`);
      if (el) el.remove();
    });

    function sendMessage() {
      const text = input.value.trim();
      if (!text) return;

      if (editingMessageId) {
        socket.emit("edit message", { _id: editingMessageId, messageText: text });
        editingMessageId = null;
      } else {
        socket.emit("chat message", {
          room,
          text,
          senderId: meId,
          receiverId: friendId
        });
      }

      input.value = "";
    }

    sendBtn.addEventListener("click", sendMessage);
    input.addEventListener("keypress", e => {
      if (e.key === "Enter") sendMessage();
    });

    emojiBtn.addEventListener("click", () => {
      emojiPicker.style.display = emojiPicker.style.display === "none" ? "block" : "none";
    });

    emojiPicker.addEventListener("emoji-click", e => {
      input.value += e.detail.unicode;
      emojiPicker.style.display = "none";
      input.focus();
    });

    attachBtn.addEventListener("click", () => fileInput.click());

    fileInput.addEventListener("change", async () => {
      const file = fileInput.files[0];
      if (!file) return;

      const formData = new FormData();
      formData.append("file", file);
      formData.append("senderId", meId);
      formData.append("receiverId", friendId);

      const res = await fetch("/upload-message-file", {
        method: "POST",
        body: formData
      });

      const msg = await res.json();
      socket.emit("chat message", { ...msg, room });
    });

    messagesEl.addEventListener("click", e => {
      const msgDiv = e.target.closest(".msg");
      const id = msgDiv?.dataset?.id;

      if (e.target.classList.contains("edit")) {
        const text = msgDiv.querySelector(".text").innerHTML;
        input.value = text.replace(/<[^>]*>?/gm, ""); // strip HTML
        editingMessageId = id;
        input.focus();
      }

      if (e.target.classList.contains("delete")) {
        if (confirm("Delete this message?")) {
          socket.emit("delete message", { _id: id });
        }
      }
    });
  </script>
</body>
</html>



<!-- END => Try 8 -->